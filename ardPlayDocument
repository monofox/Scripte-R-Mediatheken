#!/usr/bin/env python3
from urllib.parse import urlparse, parse_qs
import urllib.request
import sys, shlex, subprocess, json

PLAYER = '/usr/bin/mplayer'
BASE_URL = 'http://www.ardmediathek.de/play/media/{:d}?devicetype=pc&features=hls'
CMD_TPL = '{:s} "{:s}"'

def parseArg(url):
	url = url.strip()
	docId = None
	try:
		docId = int(url)
	except ValueError:
		# can't be a docID. It must be an URL. Parse it.
		upr = urlparse(url)
		if len(upr.query) > 0:
			qspr = parse_qs(upr.query)
			try:
				docId = int(qspr['documentId'][0])
			except:
				# ok is fine. We didn't found 'documentId'.
				# or we are out of list index
				# or its not a number
				pass

	if docId is None:
		sys.stderr.write('Invalid URL passed!\n')
		sys.exit(1)
	else:
		finUrl = BASE_URL.format(docId)
		req = urllib.request.Request(finUrl)
		r = urllib.request.urlopen(req)
		if r.code != 200:
			sys.stderr.write('Could not retrieve stream informations.\n')
			sys.exit(1)

		js = json.loads(r.read().decode('utf-8'))
		bestUrl = ''
		bestQuality = -1
		try:
			for e in js['_mediaArray'][0]['_mediaStreamArray']:
				if bestQuality == -1 or bestQuality == 'auto' or (e['_quality'] != 'auto' and e['_quality'] > bestQuality):
					bestUrl = e['_stream']
					try:
						bestQuality = int(e['_quality'])
					except ValueError:
						bestQuality = e['_quality'].strip()
		except Exception as e:
			sys.stderr.write('Could not parse stream json.\n')
			sys.exit(1)

		if len(bestUrl) <= 0:
			sys.stderr.write('Could not find any stream.\n')
			sys.exit(1)

		printStreams(js, True)

def printStreams(streams, play=False):
	i = 0
	streamNumbered = []
	for streamPlugin in streams['_mediaArray']:
		print('Plugin ' + str(streamPlugin['_plugin']) + ':')
		print(9*'=')
		availableQualities = []
		# get title of that language.
		for metaStream in streamPlugin['_mediaStreamArray']:
			qualKey = 'MQ'
			if '_cnd' in metaStream.keys() and metaStream['_cdn'] == 'flashls':
				qualKey = 'XQ'
			elif metaStream['_quality'] == 0:
				qualKey = 'MQ'
			elif metaStream['_quality'] == 1:
				qualKey = 'HQ'
			elif metaStream['_quality'] == 2:
				qualKey = 'EQ'
			elif metaStream['_quality'] == 3:
				qualKey = 'SQ'
			if qualKey not in availableQualities:
				availableQualities.append(qualKey)

		knownQuals = []
		for qual in ['XQ', 'MQ', 'HQ', 'EQ', 'SQ']:
			if qual in availableQualities:
				knownQuals.append(qual)
		# we need to resort the qualStreams.
		for quality in knownQuals:
			print(quality + ':')
			for metaStream in streamPlugin['_mediaStreamArray']:
				qualKey = 'MQ'
				if '_cnd' in metaStream.keys() and metaStream['_cdn'] == 'flashls':
					qualKey = 'XQ'
				elif metaStream['_quality'] == 0:
					qualKey = 'MQ'
				elif metaStream['_quality'] == 1:
					qualKey = 'HQ'
				elif metaStream['_quality'] == 2:
					qualKey = 'EQ'
				elif metaStream['_quality'] == 3:
					qualKey = 'SQ'
				if qualKey == quality: 
					playNo = ''
					streamList = []
					if type(metaStream['_stream']).__name__ != 'list':
						streamList.append(metaStream['_stream'])
					else:
						streamList = metaStream['_stream']

					for streamEntry in streamList:
						if streamEntry.startswith('//'):
							streamEntry = 'https:' + streamEntry
						if play:
							playNo = '[{:>2d}] '.format(i)
							streamNumbered.append(streamEntry)
							i += 1
						print('    ' + playNo + ': ' + streamEntry)
		print(' ')

	if play:
		playNo = input('> ')
		try:
			playNo = int(playNo.strip())
		except ValueError:
			sys.stderr.write('Invalid number given. Cancel.\n')
		else:
			try:
				streamUrl = streamNumbered[playNo]
			except KeyError:
				sys.stderr.write('Stream # not existant.\n')
			else:
				cmd = CMD_TPL.format(PLAYER, streamUrl)
				subprocess.run(cmd, shell=True, check=True)

if __name__ == '__main__':
	if len(sys.argv) > 2:
		sys.stderr.write('Give me only ONE url!\n')
		sys.exit(1)
	elif len(sys.argv) < 2:
		sys.stderr.write('You have to pass an url!\n')
		sys.exit(1)
	else:
		parseArg(sys.argv[1])
