#!/usr/bin/env python3
import urllib.request, urllib.parse
import json
import sys
import shlex
import subprocess

API_TOKEN_PREFIX = 'Bearer'
#API_TOKEN = '%s f4ba81fa117681c42383194a7103251db2981962' % (API_TOKEN_PREFIX,)
API_TOKEN = '%s 7afe5efa279e5039d47a07f9a2c9974d0f53d7e1' % (API_TOKEN_PREFIX,)
# NEW: d2726b6c8c655e42b68b0db26131b15b22bd1a32'
API_URL = 'https://api.zdf.de'
API_PATH = 'content/documents/zdf'
API_PARAMS = '?profile=player'
PLAYER_ID = 'ngplayer_2_3'
PLAYER = 'mplayer'
PLAYER_HLS = 'vlc'

def getBasePath(url):
	urlAnalyze = urllib.parse.urlparse(url)
	try:
		return urlAnalyze.path.rstrip('.html')
	except:
		raise Exception('Invalid URL given!')

def getAPIToken(url):
	# alternative: ask json uri through https://zdf-cdn.live.cellular.de/mediathekV2/token
	global API_TOKEN
	api = None
	print('Fetch URL: ', url)
	req = urllib.request.Request(url)
	r = urllib.request.urlopen(req)
	if r.code == 200:
		cnt = r.read().decode('utf-8')
		startPosition = cnt.find('data-zdfplayer-jsb')
		if startPosition > -1:
			endPosition = cnt.find('}', cnt.find('data-zdfplayer-jsb'))
			if endPosition > -1:
				jc = cnt[startPosition+20:endPosition+1]
				try:
					jc = json.loads(jc.replace('\n', ''))
					api = '%s %s' % (API_TOKEN_PREFIX, jc['apiToken'])
				except:
					pass

	if api is None:
		sys.stderr.write('Could not retrieve the API token!')
	else:
		print('Found API: %s' % (api,))
		API_TOKEN = api

def fetchStream(url):
	streams = {}
	streamFileName = getBasePath(url)
	getAPIToken(url)

	fullUrl = API_URL + '/' + API_PATH + '/' + streamFileName + '.json' + API_PARAMS
	print('Fetch URL: ', fullUrl)
	req = urllib.request.Request(fullUrl)
	req.add_header('Api-Auth', API_TOKEN)
	r = urllib.request.urlopen(req)
	if r.code != 200:
		raise Exception('Could not retrieve the configuration file!')

	config = json.loads(r.read().decode('utf-8'))
	if not 'hasVideo' in config.keys():
		raise Exception('Could not retrieve the configuration file (important info not given)!')
	if not config['hasVideo']:
		raise Exception('Site does not contain any video anymore!')
	try:
		nextUrlPath = config['mainVideoContent']['http://zdf.de/rels/target']['http://zdf.de/rels/streams/ptmd']
	except KeyError:
		nextUrlPath = config['mainVideoContent']['http://zdf.de/rels/target']['http://zdf.de/rels/streams/ptmd-template']
	finally:
		nextUrlPath = nextUrlPath.replace('{playerId}', PLAYER_ID)
	print('Found next URL path: %s' % (nextUrlPath,))

	fullUrl = API_URL + ('/' if nextUrlPath[:1] != '/' else '') + nextUrlPath
	print('Fetch URL: ', fullUrl)
	req = urllib.request.Request(fullUrl)
	req.add_header('Api-Auth', API_TOKEN)
	r = urllib.request.urlopen(req)
	if r.code != 200:
		raise Exception('Could not retrieve the stream information!')

	rawJson = r.read().decode('utf-8')
	streamInfo = json.loads(rawJson)
	# now try to fetch.
	for e in streamInfo['priorityList']:
		for fl in e['formitaeten']:
			streams[fl['mimeType']] = {}
			for qual in fl['qualities']:
				qualKey = 'XQ'
				if qual['hd'] == True:
					qualKey = 'HD'
				elif qual['quality'] == 'auto':
					qualKey = 'XQ'
				elif qual['quality'] == 'low':
					qualKey = 'MQ'
				elif qual['quality'] == 'med':
					qualKey = 'HQ'
				elif qual['quality'] == 'high':
					qualKey = 'EQ'
				elif qual['quality'] == 'veryhigh':
					qualKey = 'SQ'
				streams[fl['mimeType']][qualKey] = ''
				for track in qual['audio']['tracks']:
					# do not override!
					if len(streams[fl['mimeType']][qualKey]) <= 0:
						streams[fl['mimeType']][qualKey] = track['uri']
	return streams

def printStreams(streams, play=False):
	i = 0
	streamNumbered = []
	streamInfo = []
	for streamType, qualStreams in streams.items():
		print(streamType + ':')
		print((len(streamType) + 1)*'=')

		for qualKey in ['XQ', 'MQ', 'HQ', 'EQ', 'SQ', 'HD']:
			if qualKey in qualStreams.keys():
				playNo = ''
				if play:
					playNo = '[{:>2d}] '.format(i)
					streamNumbered.append(qualStreams[qualKey])
					streamInfo.append(streamType)
					i += 1
				print('    ' + playNo + qualKey + ': ' + qualStreams[qualKey])
				print(' ')

	if play:
		playNo = input('> ')
		try:
			playNo = int(playNo.strip())
		except ValueError:
			sys.stderr.write('Invalid number given. Cancel.\n')
		else:
			try:
				streamUrl = streamNumbered[playNo]
			except KeyError:
				sys.stderr.write('Stream # not existant.\n')
			else:
				if streamInfo[playNo] == 'application/x-mpegURL':
					selectedPlayer = PLAYER_HLS
				else:
					selectedPlayer = PLAYER
				fullCmd = shlex.split(selectedPlayer + ' "' + streamUrl + '"')
				subprocess.Popen(fullCmd)

if __name__ == '__main__':
	playUrl = False
	if len(sys.argv) > 2:
		if sys.argv[1] == '--play':
			playUrl = True
			url = sys.argv[2]
		else:
			url = sys.argv[1]
	elif len(sys.argv) > 1:
		url = sys.argv[1]
	else:
		url = input('Give me the URL: ')

	streams = fetchStream(url)
	if playUrl:
		printStreams(streams, True)
	else:
		print('\nStreams: ')
		printStreams(streams)
