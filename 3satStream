#!/usr/bin/env python3
import urllib.request, urllib.parse
import sys
import json
import shlex
import subprocess
from xml.dom.minidom import parseString

CONFIG_URL = 'https://www.3sat.de/mediaplayer/ngp/6/config/config_3sat.json'
PLAYER_ID = 'ngplayer_2_3'
PLAYER = 'mplayer'
PLAYER_HLS = 'vlc'

def fetchStream(url):
	# get urls like http://www.3sat.de/mediathek/?mode=play&obj=71859
	# Need to extract the obj
	streams = {}
	streamObject = None
	streamQuery = urllib.parse.parse_qs(urllib.parse.urlparse(url).query)
	if 'obj' not in streamQuery:
		raise Exception('Object ID not found in URL.')
	else:
		streamObject = streamQuery['obj'][0]

	# fetch config
	print('Fetch URL: ', CONFIG_URL)
	req = urllib.request.Request(CONFIG_URL)
	r = urllib.request.urlopen(req)
	if r.code != 200:
		raise Exception('Could not retrieve the configuration file!')

	config = json.loads(r.read().decode('utf-8'))
	contentDescUrl = config['contentPrefix']

	# fetch the 3sat details
	fullUrl = ('https:' if contentDescUrl.startswith('//') else '') + contentDescUrl + streamObject
	print('Fetch URL: ', fullUrl)
	req = urllib.request.Request(fullUrl)
	r = urllib.request.urlopen(req)
	if r.code != 200:
		raise Exception('Could not retrieve the content description file!')

	contentDesc = parseString(r.read().decode('utf-8'))
	if len(contentDesc.childNodes) <= 0:
		raise Exception('Config empty!')
	
	baseName = contentDesc.childNodes[0].getElementsByTagName('basename')[0].firstChild.wholeText
	fullUrl = ('https:' if config['vcmsPtmdVodBaseUrl'].startswith('//') else '') + \
		config['vcmsPtmdVodBaseUrl'].format(playerId=PLAYER_ID) + '/' + baseName + '/2'

	print('Fetch URL: ', fullUrl)
	req = urllib.request.Request(fullUrl)
	r = urllib.request.urlopen(req)
	if r.code != 200:
		raise Exception('Could not retrieve the content description file!')

	print('')

	streamInfo = json.loads(r.read().decode('utf-8'))
	# now try to fetch.
	for e in streamInfo['priorityList']:
		for fl in e['formitaeten']:
			streams[fl['mimeType']] = {}
			for qual in fl['qualities']:
				qualKey = 'XQ'
				if qual['hd'] == True:
					qualKey = 'HD'
				elif qual['quality'] == 'auto':
					qualKey = 'XQ'
				elif qual['quality'] == 'low':
					qualKey = 'MQ'
				elif qual['quality'] == 'med':
					qualKey = 'HQ'
				elif qual['quality'] == 'high':
					qualKey = 'EQ'
				elif qual['quality'] == 'veryhigh':
					qualKey = 'SQ'
				streams[fl['mimeType']][qualKey] = ''
				for track in qual['audio']['tracks']:
					# do not override!
					if len(streams[fl['mimeType']][qualKey]) <= 0:
						streams[fl['mimeType']][qualKey] = track['uri']
	return streams

def printStreams(streams, play=False):
	i = 0
	streamNumbered = []
	streamInfo = []
	for streamType, qualStreams in streams.items():
		print(streamType + ':')
		print((len(streamType) + 1)*'=')

		for qualKey in ['XQ', 'MQ', 'HQ', 'EQ', 'SQ', 'HD']:
			if qualKey in qualStreams.keys():
				playNo = ''
				if play:
					playNo = '[{:>2d}] '.format(i)
					streamNumbered.append(qualStreams[qualKey])
					streamInfo.append(streamType)
					i += 1
				print('    ' + playNo + qualKey + ': ' + qualStreams[qualKey])
				print(' ')

	if play:
		playNo = input('> ')
		try:
			playNo = int(playNo.strip())
		except ValueError:
			sys.stderr.write('Invalid number given. Cancel.\n')
		else:
			try:
				streamUrl = streamNumbered[playNo]
			except KeyError:
				sys.stderr.write('Stream # not existant.\n')
			else:
				if streamInfo[playNo] == 'application/x-mpegURL':
					selectedPlayer = PLAYER_HLS
				else:
					selectedPlayer = PLAYER
				fullCmd = shlex.split(selectedPlayer + ' "' + streamUrl + '"')
				subprocess.Popen(fullCmd)

if __name__ == '__main__':
	playUrl = False
	if len(sys.argv) > 2:
		if sys.argv[1] == '--play':
			playUrl = True
			url = sys.argv[2]
		else:
			url = sys.argv[1]
	elif len(sys.argv) > 1:
		url = sys.argv[1]
	else:
		url = input('Give me the URL: ')

	streams = fetchStream(url)
	if playUrl:
		printStreams(streams, True)
	else:
		print('\nStreams: ')
		printStreams(streams)
