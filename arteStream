#!/usr/bin/env python3
import urllib.request
import json
import sys
import pprint
import subprocess
import shlex

API_URL = 'https://api.arte.tv'
API_PATH = 'api/player/v1/config/de'
API_PARAMS = '?autostart=0&lifeCycle=1'
PLAYER = '/usr/bin/mplayer'

def getMovieID(url):
	# for certain urls (especially concert.arte.tv), it is necessary to retrieve
	# the real website first. 
	fullUrl = None
	extrUrl = None
	if url.endswith('/'):
		url = url[:-1]
	try:
		extrUrl = url.split('/')[-2:-1][0]
	except:
		raise Exception('Invalid URL given!')

	# now whats the result?
	try:
		moveId = int(extrUrl[:2])
	except ValueError:
		extrUrl = None
		# OK.. no real move ID retrieved (starts always with number...)
		req = urllib.request.Request(url)
		r = urllib.request.urlopen(req)
		if r.code != 200:
			raise Exception('Could not retrieve the original site!')

		cnt = r.read().decode('utf-8')
		startPosition = cnt.find('arte_vp_url')
		if startPosition > -1:
			endPosition = cnt.find('"', startPosition + 14)
			if endPosition > -1:
				fullUrl = cnt[startPosition+13:endPosition]
	else:
		fullUrl = API_URL + '/' + API_PATH + '/' + extrUrl + API_PARAMS

	if fullUrl is None:
		raise Exception('Could not find the API url!')
	return fullUrl

def fetchStream(url):
	streams = {}
	fullUrl = getMovieID(url)

	print('Fetch URL: ', fullUrl)
	req = urllib.request.Request(fullUrl)
	r = urllib.request.urlopen(req)
	if r.code != 200:
		raise Exception('Could not retrieve the configuration file!')

	streamInfo = json.loads(r.read().decode('utf-8'))
	# now try to fetch.
	for fle in streamInfo['videoJsonPlayer']['VSR'].keys():
		fl = streamInfo['videoJsonPlayer']['VSR'][fle]
		if fl['mimeType'] not in streams.keys():
			streams[fl['mimeType']] = {}
		
		streamKey = '{:s} {:s}'.format(fl['versionCode'], fl['versionShortLibelle'])
		if streamKey not in streams[fl['mimeType']].keys():
			streams[fl['mimeType']][streamKey] = {}

		if fl['quality'] not in streams[fl['mimeType']][streamKey].keys():
			streams[fl['mimeType']][streamKey][fl['quality']] = []

			e = {
				'title': fl['versionLibelle'],
				'url': fl['url']
			}
			streams[fl['mimeType']][streamKey][fl['quality']].append(e)

	return streams

def selectStream(streams):
	# base CMD: dialog --title "ARTE.tv" --menu "Select the right stream" 24 80 140 'DE-ANG::EQ' test
	cmd = 'dialog --title "ARTE.tv" --menu "Select the right stream" 24 80 140'
	qualityDescs = {
		'SQ': 'Very high quality',
		'EQ': 'High quality',
		'HQ': 'Medium quality',
		'MQ': 'Low quality'
	}
	qualityNums = {
		'SQ': 0,
		'EQ': 1,
		'HQ': 2,
		'MQ': 3
	}
	oneDimensionObject = {}
	params = ''
	for lang, qualities in streams['video/mp4'].items():
		for quality, urls in qualities.items():
			for url in urls:
				oneDimensionObject['%s+%s::%s' % (qualityNums[quality], quality, lang)] = url['title']

	oneDimensionObjectKeys = sorted(oneDimensionObject)
	for streamId in oneDimensionObjectKeys:
				params += ' \'%s\' \'%s\'' % (streamId, oneDimensionObject[streamId])

	fullCmd = shlex.split(cmd + params)
	p = subprocess.Popen(fullCmd, stdin=subprocess.DEVNULL)
	print(p)

def printStreams(streams, play=False):
	i = 0
	streamNumbered = []
	for streamType, streamLangs in streams.items():
		print(streamType + ':')
		print((len(streamType) + 1)*'=')
		for langKey, qualStreams in streamLangs.items():
			# get title of that language.
			title = ''
			availableQualities = []
			for qualKey, items in qualStreams.items():
				for urlEntry in items:
					if len(title) <= 0:
						title = urlEntry['title']
				if qualKey not in availableQualities:
					availableQualities.append(qualKey)

			print(langKey + ': ' + title)
			knownQuals = []
			for qual in ['XQ', 'MQ', 'HQ', 'EQ', 'SQ']:
				if qual in availableQualities:
					knownQuals.append(qual)
			# we need to resort the qualStreams.
			for qualKey in knownQuals:
				for urlEntry in qualStreams[qualKey]:
					playNo = ''
					if play:
						playNo = '[{:>2d}] '.format(i)
						streamNumbered.append(urlEntry['url'])
						i += 1
					print('    ' + playNo + qualKey + ': ' + urlEntry['url'])
			print(' ')

	if play:
		playNo = input('> ')
		try:
			playNo = int(playNo.strip())
		except ValueError:
			sys.stderr.write('Invalid number given. Cancel.\n')
		else:
			try:
				streamUrl = streamNumbered[playNo]
			except KeyError:
				sys.stderr.write('Stream # not existant.\n')
			else:
				fullCmd = shlex.split(PLAYER + ' "' + streamUrl + '"')
				subprocess.Popen(fullCmd)

if __name__ == '__main__':
	playUrl = False
	if len(sys.argv) > 2:
		if sys.argv[1] == '--play':
			playUrl = True
			url = sys.argv[2]
		else:
			url = sys.argv[1]
	elif len(sys.argv) > 1:
		url = sys.argv[1]
	else:
		url = input('Give me the URL: ')

	streams = fetchStream(url)
	if playUrl:
		#selectStream(streams)
		printStreams(streams, True)
	else:
		print('Streams: ')
		printStreams(streams)

